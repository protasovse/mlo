# brew install sphinx --with-mysql
# searchd --config /Users/ProtasovSE/PycharmProjects/mlo_rest/mlo_rest/project/config/sphinx.conf
# indexer --config /Users/ProtasovSE/PycharmProjects/mlo_rest/mlo_rest/project/config/sphinx.conf --all --rotate

source question {

	type = mysql
    sql_host = localhost
    sql_user = root
    sql_pass =
    sql_db = mlo_new
    sql_port = 3306

    sql_query_pre = SET NAMES utf8

    # В дельта-индекс попадают вопросы, которые страше 1 недели
    sql_query_pre = REPLACE INTO entry_sphcounter SELECT 1, MAX(entry_ptr_id) FROM entry_question \
                    LEFT JOIN `entry_entry` ON (`entry_question`.`entry_ptr_id`=`entry_entry`.`id`) \
                    WHERE `entry_entry`.`pub_date` < NOW()-INTERVAL 1 WEEK;

    sql_query = SELECT \
                `entry_question`.`entry_ptr_id`, \
                `entry_question`.`title`, \
                `entry_entry`.`content`, \
                `entry_entry`.`reply_count`, \
                `entry_question`.`is_pay`, \
                `entry_question`.`rubric_id`, \
                `entry_entry`.`author_id`, \
                `rr1`.`name`, \
                `rr1`.`keywords`, \
                 UNIX_TIMESTAMP(`entry_entry`.`pub_date`) as `pub_date`, \
                 GROUP_CONCAT(ee1.`author_id`) AS `answers_authors_id`, \
                 GROUP_CONCAT(entry_additionals.`user_id`) AS `additionals_user_id`, \
                 `advice_advice`.`expert_id` AS `advice_expert_id`, \
                 `advice_advice`.`status` AS `advice_status` \
            FROM `entry_question` \
            LEFT JOIN `entry_entry` ON (`entry_question`.`entry_ptr_id` = `entry_entry`.`id`) \
            LEFT JOIN `rubric_rubric` AS `rr1` ON (`entry_question`.`rubric_id` = `rr1`.`id`) \
            LEFT JOIN `entry_answer` ON (`entry_answer`.`on_question_id` = `entry_question`.`entry_ptr_id` AND `entry_answer`.`parent_id` IS NULL) \
            LEFT JOIN `entry_entry` AS ee1 ON (`entry_answer`.`entry_ptr_id` = `ee1`.`id`) \
            LEFT JOIN `advice_advice` ON (`advice_advice`.`question_id` = `entry_question`.`entry_ptr_id`) \
            LEFT JOIN `entry_additionals` ON (`entry_additionals`.`question_id` = `entry_question`.`entry_ptr_id`) \
            WHERE `entry_question`.`entry_ptr_id` <= (SELECT `max_id` FROM `entry_sphcounter` WHERE `counter_id`=1) \
            GROUP BY `entry_question`.`entry_ptr_id`

    sql_attr_timestamp      = pub_date
    sql_attr_bool           = is_pay
    sql_attr_uint 		    = rubric_id
    sql_attr_uint 		    = author_id
    sql_attr_uint           = advice_expert_id
    sql_attr_uint           = reply_count
    sql_attr_multi          = uint answers_authors_id from field;
    sql_attr_multi          = uint additionals_user_id from field;
    sql_range_step 		    = 100
}

source question_delta {

	type = mysql
    sql_host = localhost
    sql_user = root
    sql_pass =
    sql_db = mlo_new
    sql_port = 3306

    sql_query_pre = SET NAMES utf8

    sql_query_pre = REPLACE INTO entry_sphcounter SELECT 2, 2

    sql_query = SELECT \
                `entry_question`.`entry_ptr_id`, \
                `entry_question`.`title`, \
                `entry_entry`.`content`, \
                `entry_entry`.`reply_count`, \
                `entry_question`.`is_pay`, \
                `entry_question`.`rubric_id`, \
                `entry_entry`.`author_id`, \
                `rr1`.`name`, \
                `rr1`.`keywords`, \
                 UNIX_TIMESTAMP(`entry_entry`.`pub_date`) as `pub_date`, \
                 GROUP_CONCAT(ee1.`author_id`) AS `answers_authors_id`, \
                 `advice_advice`.`expert_id` AS `advice_expert_id`, \
                 `advice_advice`.`status` AS `advice_status` \
            FROM `entry_question` \
            LEFT JOIN `entry_entry` ON (`entry_question`.`entry_ptr_id` = `entry_entry`.`id`) \
            LEFT JOIN `rubric_rubric` AS `rr1` ON (`entry_question`.`rubric_id` = `rr1`.`id`) \
            LEFT JOIN `entry_answer` ON (`entry_answer`.`on_question_id` = `entry_question`.`entry_ptr_id` AND `entry_answer`.`parent_id` IS NULL) \
            LEFT JOIN `entry_entry` AS ee1 ON (`entry_answer`.`entry_ptr_id` = `ee1`.`id`) \
            LEFT JOIN `advice_advice` ON (`advice_advice`.`question_id` = `entry_question`.`entry_ptr_id`) \
            WHERE `entry_question`.`entry_ptr_id` > (SELECT `max_id` FROM `entry_sphcounter` WHERE `counter_id`=1) \
            GROUP BY `entry_question`.`entry_ptr_id`

    sql_attr_timestamp      = pub_date
    sql_attr_bool           = is_pay
    sql_attr_uint 		    = rubric_id
    sql_attr_uint 		    = author_id
    sql_attr_uint           = advice_expert_id
    sql_attr_uint           = reply_count
    sql_attr_multi          = uint answers_authors_id from field;
    sql_range_step 		    = 100
}

index question
{
    source            = question
    morphology        = stem_ru
    path              = /usr/local/var/data/question
}


index question_delta : question
{
    source            = question_delta
    morphology        = stem_ru
    path              = /usr/local/var/data/question_delta
}


indexer
{
	mem_limit		= 128M
}


searchd
{
	listen			= 9312
	log			    = /usr/local/var/log/searchd.log
	query_log		= /usr/local/var/log/query.log
	read_timeout	= 5
	max_children	= 30
	pid_file		= /usr/local/var/log/searchd.pid
	seamless_rotate	= 1
	preopen_indexes	= 1
	unlink_old		= 1
	workers			= threads # for RT to work
	binlog_path		= /usr/local/var/data
}
